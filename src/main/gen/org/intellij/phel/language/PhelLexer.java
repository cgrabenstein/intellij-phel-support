/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.phel.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static org.intellij.phel.language.psi.PhelTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Phel.flex</tt>
 */
public class PhelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SYMBOL0 = 2;
  public static final int SYMBOL1 = 4;
  public static final int SYMBOL2 = 6;
  public static final int SYMBOL3 = 8;
  public static final int DISPATCH = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\151\1\31\4\13\1\152\1\153\1\154\1\155\1\13\1\155\1\13\1\156"+
    "\1\154\1\157\5\13\1\160\1\123\1\1\1\161\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\155\2\13\1\43\1\13\1\162\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\163\1\122\4\1\4\13\1\43\1\123\1\164\1"+
    "\156\3\13\1\40\3\13\1\156\3\13\1\26\1\165\1\40\1\13\1\42\1\153\4\1\1\166\1"+
    "\13\1\167\17\13\1\170\21\13\1\147\2\13\1\147\1\171\1\13\1\42\3\13\1\172\1"+
    "\173\1\174\1\135\1\173\1\175\1\1\1\176\1\177\1\64\1\200\1\1\1\201\1\1\1\135"+
    "\3\1\2\13\1\64\1\202\1\203\1\204\1\205\1\206\1\1\2\13\1\153\62\1\1\207\2\13"+
    "\1\162\161\1\2\13\1\122\2\13\1\122\10\13\1\210\1\156\2\13\1\141\3\13\1\211"+
    "\1\177\1\13\1\212\4\213\2\13\2\1\1\177\35\1\1\214\1\1\1\24\1\215\1\24\4\13"+
    "\1\216\1\24\4\13\1\142\1\217\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1"+
    "\13\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1"+
    "\135\1\13\1\220\1\1\3\13\1\221\7\13\1\16\1\1\1\222\1\223\5\13\1\224\1\13\1"+
    "\122\1\26\3\1\1\222\2\13\1\26\1\1\3\13\1\156\4\13\1\60\1\123\1\13\1\225\1"+
    "\40\1\13\1\42\2\13\1\156\1\13\1\135\4\13\1\226\1\123\1\13\1\227\3\13\1\212"+
    "\1\42\1\123\1\13\1\115\4\13\1\32\1\161\1\13\1\230\1\231\1\232\1\213\2\13\1"+
    "\142\1\60\7\13\1\233\1\123\72\13\1\156\1\13\1\234\2\13\1\43\20\1\26\13\1\42"+
    "\6\13\1\162\2\1\1\212\1\235\1\35\1\236\1\237\6\13\1\16\1\1\1\240\25\13\1\42"+
    "\1\1\4\13\1\223\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\241\1\242\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\243\1\24\1\31\1\207\4\13\1\122\1\244\1\245\2\1\1\246"+
    "\1\13\1\14\1\247\2\42\2\1\7\13\1\31\4\1\3\13\1\155\7\1\1\250\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\251\1\252\2\1"+
    "\11\13\1\42\1\123\2\13\1\251\1\13\1\43\2\13\1\26\3\13\1\156\11\1\23\13\1\212"+
    "\1\13\1\60\1\26\11\1\1\253\2\13\1\254\1\13\1\60\1\13\1\212\1\13\1\122\4\1"+
    "\1\13\1\255\1\13\1\60\1\13\1\162\4\1\3\13\1\256\4\1\1\257\1\260\1\13\1\261"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\212\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\153\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\212"+
    "\1\1\1\57\1\177\3\13\1\31\1\1\1\13\1\153\1\123\3\13\1\262\1\1\2\13\1\263\4"+
    "\13\1\264\1\265\2\1\1\13\1\22\1\13\1\266\4\1\1\267\1\27\1\153\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\270\1\271\1\155\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\272\1\123\12\1\3\13\1\273\1\64\1\274\2\1\4\13\1\275\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\177\34\1\3\13\1\153"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\223\1\13\1\223\1\134\1\212\64\1\71\13"+
    "\1\162\6\1\6\13\1\122\1\1\14\13\1\156\53\1\2\13\1\122\75\1\44\13\1\212\33"+
    "\1\43\13\1\153\1\13\1\122\1\123\6\1\1\13\1\42\1\155\3\13\1\212\1\156\1\123"+
    "\1\240\1\276\1\13\67\1\4\13\1\155\2\13\1\122\1\177\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\153\1\277\114\1\1\300"+
    "\1\301\1\302\1\1\1\303\11\1\1\304\33\1\5\13\1\136\3\13\1\154\1\305\1\306\1"+
    "\307\3\13\1\310\1\311\1\13\1\312\1\313\1\101\24\13\1\273\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\314\3\315\40\1\3\13\1\234\2\13\1\135\1\316\1\317\1\164\1\24\25\1\1\14\1"+
    "\224\1\320\75\1\14\13\1\155\1\212\2\1\4\13\1\31\1\123\112\1\1\307\1\13\1\321"+
    "\1\322\1\323\1\324\1\325\1\326\1\327\1\43\1\330\1\43\47\1\1\13\1\162\1\13"+
    "\1\162\1\13\1\162\47\1\55\13\1\212\2\1\103\13\1\155\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\4\3\22\0\1\1\1\67\1\4\1\51\3\46\1\47\1\55\1\56\1\46\1\6\1\63\1\65"+
    "\1\12\1\21\1\14\7\27\2\7\1\50\1\2\1\70\1\66\1\46\1\72\1\54\4\25\1\13\1\25"+
    "\6\20\1\11\1\10\14\20\1\57\1\5\1\60\1\52\1\71\1\64\1\31\1\30\1\32\1\44\1\36"+
    "\1\22\2\20\1\42\1\20\1\33\1\41\1\43\1\23\1\26\1\35\1\20\1\17\1\34\1\37\1\24"+
    "\1\20\1\40\1\15\2\20\1\61\1\46\1\62\1\53\6\0\1\3\12\0\1\1\11\0\1\45\12\0\1"+
    "\45\4\0\1\45\5\0\27\45\1\0\12\45\4\0\14\45\16\0\5\45\7\0\1\45\1\0\1\45\1\0"+
    "\5\45\1\0\2\45\2\0\4\45\1\0\1\45\6\0\1\45\1\0\3\45\1\0\1\45\1\0\4\45\1\0\23"+
    "\45\1\0\11\45\1\0\26\45\2\0\1\45\6\0\10\45\10\0\16\45\1\0\1\45\1\0\2\45\1"+
    "\0\2\45\1\0\1\45\10\0\13\45\5\0\3\45\15\0\12\16\4\0\6\45\1\0\10\45\2\0\12"+
    "\45\1\0\6\45\12\16\3\45\2\0\14\45\2\0\3\45\12\16\14\45\4\0\1\45\5\0\16\45"+
    "\2\0\14\45\4\0\5\45\1\0\10\45\6\0\20\45\2\0\12\16\1\45\2\0\16\45\1\0\1\45"+
    "\3\0\4\45\2\0\11\45\2\0\2\45\2\0\4\45\10\0\1\45\4\0\2\45\1\0\1\45\1\0\3\45"+
    "\1\0\6\45\4\0\2\45\1\0\2\45\1\0\2\45\1\0\2\45\2\0\1\45\1\0\5\45\4\0\2\45\2"+
    "\0\3\45\3\0\1\45\7\0\4\45\1\0\1\45\7\0\12\16\6\45\13\0\3\45\1\0\11\45\1\0"+
    "\2\45\1\0\2\45\1\0\5\45\2\0\12\45\1\0\3\45\1\0\3\45\2\0\1\45\30\0\1\45\7\0"+
    "\3\45\1\0\10\45\2\0\6\45\2\0\2\45\2\0\3\45\10\0\2\45\4\0\2\45\1\0\1\45\1\0"+
    "\1\45\20\0\2\45\1\0\6\45\3\0\3\45\1\0\4\45\3\0\2\45\1\0\1\45\1\0\2\45\3\0"+
    "\2\45\3\0\3\45\3\0\14\45\4\0\5\45\3\0\3\45\1\0\4\45\2\0\1\45\6\0\1\45\10\0"+
    "\4\45\1\0\10\45\1\0\3\45\1\0\30\45\3\0\10\45\1\0\3\45\1\0\4\45\7\0\2\45\1"+
    "\0\3\45\5\0\4\45\1\0\5\45\2\0\4\45\5\0\2\45\7\0\1\45\2\0\2\45\16\0\3\45\1"+
    "\0\10\45\1\0\7\45\1\0\3\45\1\0\5\45\5\0\4\45\7\0\1\45\12\0\6\45\2\0\2\45\1"+
    "\0\22\45\3\0\10\45\1\0\11\45\1\0\1\45\2\0\7\45\3\0\1\45\4\0\6\45\1\0\1\45"+
    "\1\0\10\45\2\0\2\45\14\0\17\45\1\0\12\16\7\0\2\45\1\0\1\45\2\0\2\45\1\0\1"+
    "\45\2\0\1\45\6\0\4\45\1\0\7\45\1\0\3\45\1\0\1\45\1\0\1\45\2\0\2\45\1\0\15"+
    "\45\1\0\3\45\2\0\5\45\1\0\1\45\1\0\6\45\2\0\12\16\2\0\4\45\10\0\2\45\13\0"+
    "\1\45\1\0\1\45\1\0\1\45\4\0\12\45\1\0\24\45\3\0\5\45\1\0\12\45\6\0\1\45\11"+
    "\0\12\16\4\45\2\0\6\45\1\0\1\45\5\0\1\45\2\0\13\45\1\0\15\45\1\0\4\45\2\0"+
    "\7\45\1\0\1\45\1\0\4\45\2\0\1\45\1\0\4\45\2\0\7\45\1\0\1\45\1\0\4\45\2\0\16"+
    "\45\2\0\6\45\2\0\15\45\2\0\1\45\1\1\32\45\3\0\13\45\7\0\15\45\1\0\7\45\13"+
    "\0\4\45\14\0\1\45\1\0\2\45\14\0\4\45\3\0\1\45\4\0\2\45\15\0\3\45\2\0\12\45"+
    "\15\0\1\45\23\0\5\45\12\16\3\0\6\45\1\0\23\45\1\0\2\45\6\0\6\45\5\0\15\45"+
    "\1\0\1\45\1\0\1\45\1\0\1\45\1\0\6\45\1\0\7\45\1\0\1\45\3\0\3\45\1\0\7\45\3"+
    "\0\4\45\2\0\6\45\4\0\13\1\15\0\2\3\5\0\1\1\17\0\1\45\4\0\1\45\12\0\1\1\1\0"+
    "\1\45\15\0\1\45\2\0\1\45\4\0\1\45\2\0\12\45\1\0\1\45\3\0\5\45\6\0\1\45\1\0"+
    "\1\45\1\0\1\45\1\0\4\45\1\0\13\45\2\0\4\45\5\0\5\45\4\0\1\45\7\0\17\45\6\0"+
    "\15\45\7\0\10\45\11\0\7\45\1\0\7\45\1\0\1\1\4\0\3\45\11\0\5\45\2\0\5\45\3"+
    "\0\7\45\2\0\2\45\2\0\3\45\5\0\13\45\12\16\2\45\4\0\3\45\1\0\12\45\1\0\1\45"+
    "\7\0\11\45\2\0\27\45\2\0\15\45\3\0\1\45\1\0\1\45\2\0\1\45\16\0\1\45\12\16"+
    "\5\45\3\0\5\45\12\0\6\45\2\0\6\45\2\0\6\45\11\0\13\45\1\0\2\45\2\0\7\45\4"+
    "\0\5\45\3\0\5\45\5\0\12\45\1\0\5\45\1\0\1\45\1\0\2\45\1\0\2\45\1\0\12\45\3"+
    "\0\15\45\3\0\2\45\30\0\16\45\4\0\1\45\2\0\6\45\2\0\6\45\2\0\6\45\2\0\3\45"+
    "\3\0\14\45\1\0\16\45\1\0\2\45\1\0\1\45\15\0\1\45\2\0\4\45\4\0\10\45\1\0\5"+
    "\45\12\0\6\45\2\0\1\45\1\0\14\45\1\0\2\45\3\0\1\45\2\0\4\45\1\0\2\45\12\0"+
    "\10\45\6\0\6\45\1\0\2\45\5\0\10\45\1\0\3\45\1\0\13\45\4\0\3\45\4\0\6\45\1"+
    "\0\12\16\4\45\2\0\1\45\11\0\5\45\5\0\3\45\3\0\12\16\1\45\1\0\1\45\3\0\10\45"+
    "\6\0\1\45\1\0\7\45\1\0\1\45\1\0\4\45\1\0\2\45\6\0\1\45\5\0\7\45\2\0\7\45\3"+
    "\0\6\45\1\0\1\45\10\0\6\45\2\0\10\45\10\0\6\45\2\0\1\45\3\0\1\45\13\0\10\45"+
    "\5\0\15\45\3\0\2\45\6\0\5\45\3\0\6\45\10\0\10\45\2\0\7\45\16\0\4\45\4\0\3"+
    "\45\15\0\1\45\2\0\2\45\2\0\4\45\1\0\14\45\1\0\1\45\1\0\7\45\1\0\21\45\1\0"+
    "\4\45\2\0\10\45\1\0\7\45\1\0\14\45\1\0\4\45\1\0\5\45\1\0\1\45\3\0\11\45\1"+
    "\0\10\45\2\0\22\16\5\0\1\45\16\0\1\45\13\0\2\45\1\0\2\45\1\0\5\45\6\0\2\45"+
    "\1\0\1\45\2\0\1\45\1\0\12\45\1\0\4\45\1\0\1\45\1\0\1\45\6\0\1\45\4\0\1\45"+
    "\1\0\1\45\1\0\1\45\1\0\3\45\1\0\2\45\1\0\1\45\2\0\1\45\1\0\1\45\1\0\1\45\1"+
    "\0\1\45\1\0\1\45\1\0\2\45\1\0\1\45\2\0\4\45\1\0\7\45\1\0\4\45\1\0\4\45\1\0"+
    "\1\45\1\0\12\45\1\0\5\45\1\0\3\45\1\0\5\45\1\0\5\45");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\2\1\1\4\1\5\1\4"+
    "\1\6\1\5\1\6\3\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\4\1\25\1\26\1\27\1\30"+
    "\1\31\1\26\1\25\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\0\11\45"+
    "\1\5\1\0\4\5\3\0\1\46\1\6\1\0\1\30"+
    "\3\4\1\47\1\50\3\0\1\51\10\0\3\5\3\4"+
    "\1\5\1\0\1\5\1\52\1\53\1\54\1\55\1\1"+
    "\1\4\1\56\2\4\1\0\1\31\10\0\2\5\1\4"+
    "\1\5\1\52\1\55\1\1\1\55\1\57\6\0\1\55"+
    "\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u0162\0\u049c\0\u0162\0\u0162"+
    "\0\u04d7\0\u0162\0\u0162\0\u0162\0\u0162\0\u0162\0\u0162\0\u0162"+
    "\0\u0162\0\u0162\0\u0162\0\u0512\0\u054d\0\u0162\0\u0162\0\u0162"+
    "\0\u0588\0\u05c3\0\u03b0\0\u0162\0\u0162\0\u0162\0\u0162\0\u0162"+
    "\0\u0162\0\u0162\0\u0162\0\u0162\0\u05fe\0\u0162\0\u0639\0\u0162"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u054d\0\u0887\0\u08c2\0\u0162\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u0162\0\u09e9\0\u0a24\0\u03b0\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0162\0\u0162\0\u0b10\0\u05c3\0\u0b4b\0\u0162\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0512"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0973"+
    "\0\u09ae\0\u0162\0\u0f36\0\u0f71\0\u0fac\0\u0512\0\u0fe7\0\u0b10"+
    "\0\u1022\0\u0b4b\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u0e0f\0\u1321"+
    "\0\u135c\0\u0f71\0\u0512\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u135c\0\u14f9\0\u1534\0\u156f\0\u07d6\0\u15aa\0\u15e5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\10\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\16\1\20\1\16\1\7\2\16\1\21"+
    "\1\22\1\23\3\16\1\15\7\16\1\24\7\16\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\14\5\16\6\43"+
    "\4\44\1\45\6\44\1\43\26\44\1\43\1\44\13\43"+
    "\6\44\12\43\1\46\6\43\1\47\26\43\1\50\30\43"+
    "\4\51\1\52\6\51\1\53\26\51\1\50\1\51\13\43"+
    "\6\51\12\43\1\46\6\43\1\53\26\43\1\50\22\43"+
    "\1\54\1\55\1\54\1\55\1\56\2\54\3\55\1\54"+
    "\6\55\1\54\24\55\1\54\1\57\1\60\1\61\1\62"+
    "\2\54\1\56\3\54\1\56\4\54\1\63\1\64\1\50"+
    "\1\64\1\65\74\0\1\10\1\0\1\10\67\0\3\11"+
    "\1\0\67\11\4\12\1\66\1\67\65\12\3\70\1\0"+
    "\13\70\1\71\2\70\1\72\1\73\1\74\1\70\1\75"+
    "\1\70\1\76\3\70\1\77\2\70\1\100\33\70\6\0"+
    "\1\44\1\101\2\44\1\102\1\44\1\103\4\44\1\0"+
    "\5\44\1\101\20\44\1\0\1\44\13\0\6\44\7\0"+
    "\1\104\2\105\1\106\1\107\1\104\2\0\1\110\1\0"+
    "\1\111\5\0\1\104\6\0\1\107\42\0\4\44\1\102"+
    "\6\44\1\0\26\44\1\0\1\44\13\0\6\44\6\0"+
    "\4\112\1\16\6\112\1\0\26\112\1\0\1\112\13\0"+
    "\1\113\5\112\7\0\1\104\2\105\1\106\1\107\1\104"+
    "\1\114\1\0\1\110\1\0\1\111\5\0\1\104\6\0"+
    "\1\107\42\0\42\115\1\0\1\115\13\0\6\115\6\0"+
    "\4\44\1\102\6\44\1\0\7\44\1\116\16\44\1\0"+
    "\1\44\13\0\6\44\6\0\4\44\1\102\6\44\1\0"+
    "\20\44\1\117\5\44\1\0\1\44\13\0\6\44\6\0"+
    "\4\44\1\102\4\44\1\120\1\44\1\0\26\44\1\0"+
    "\1\44\13\0\6\44\50\0\1\121\76\0\1\122\24\0"+
    "\4\44\1\102\6\44\1\0\26\44\1\123\1\44\13\0"+
    "\6\44\6\0\13\44\1\0\26\44\1\0\1\44\13\0"+
    "\6\44\6\0\4\51\1\124\6\51\1\0\26\51\1\125"+
    "\1\51\13\0\6\51\6\0\13\51\1\0\26\51\1\0"+
    "\1\51\13\0\6\51\54\0\1\126\16\0\3\12\1\0"+
    "\67\12\36\0\1\127\62\0\1\130\102\0\1\131\43\0"+
    "\1\132\3\0\2\132\5\0\1\132\2\0\1\132\1\0"+
    "\4\132\3\0\1\132\5\0\1\132\42\0\1\133\12\0"+
    "\1\133\74\0\1\134\76\0\1\135\66\0\1\136\47\0"+
    "\1\44\1\137\2\140\1\141\1\142\1\137\2\44\1\143"+
    "\1\44\1\111\5\44\1\137\6\44\1\142\11\44\1\123"+
    "\1\44\13\0\6\44\6\0\1\44\1\137\2\140\1\141"+
    "\1\142\1\137\1\144\1\44\1\143\1\44\1\111\5\44"+
    "\1\137\6\44\1\142\11\44\1\123\1\44\13\0\6\44"+
    "\7\0\1\145\2\105\1\106\1\107\1\145\2\0\1\110"+
    "\1\0\1\111\5\0\1\145\6\0\1\107\43\0\1\106"+
    "\1\0\1\105\1\0\1\107\1\106\12\0\1\106\6\0"+
    "\1\107\42\0\1\146\1\147\4\0\1\147\12\0\1\147"+
    "\35\0\1\146\14\0\3\150\1\0\6\150\1\0\23\150"+
    "\35\0\1\151\4\0\1\151\12\0\1\151\51\0\4\152"+
    "\1\0\6\152\1\0\26\152\1\0\1\152\13\0\6\152"+
    "\7\0\1\153\2\154\1\0\2\153\1\154\1\153\2\154"+
    "\1\0\1\153\2\154\1\153\1\154\4\153\3\154\1\153"+
    "\5\154\1\153\1\154\23\0\1\154\7\0\4\44\1\102"+
    "\6\44\1\0\17\44\1\155\6\44\1\123\1\44\13\0"+
    "\6\44\6\0\4\44\1\102\6\44\1\0\17\44\1\156"+
    "\6\44\1\123\1\44\13\0\6\44\6\0\4\44\1\102"+
    "\6\44\1\0\2\44\1\157\23\44\1\123\1\44\13\0"+
    "\6\44\6\0\4\160\1\161\6\160\1\0\26\160\1\0"+
    "\1\160\13\0\6\160\6\0\4\162\1\163\6\162\1\0"+
    "\26\162\1\0\1\162\13\0\6\162\37\0\1\164\52\0"+
    "\1\165\113\0\1\166\41\0\1\167\3\0\2\167\5\0"+
    "\1\167\2\0\1\167\1\0\4\167\3\0\1\167\5\0"+
    "\1\167\42\0\1\170\12\0\1\170\75\0\1\171\71\0"+
    "\1\172\71\0\1\70\50\0\1\44\1\173\2\140\1\141"+
    "\1\142\1\173\2\44\1\143\1\44\1\111\5\44\1\173"+
    "\6\44\1\142\11\44\1\123\1\44\13\0\6\44\6\0"+
    "\1\44\1\174\1\44\1\140\1\44\1\142\1\174\4\44"+
    "\1\0\5\44\1\174\6\44\1\142\11\44\1\0\1\44"+
    "\13\0\6\44\6\0\1\175\1\176\2\44\1\102\1\44"+
    "\1\176\4\44\1\0\5\44\1\176\20\44\1\123\1\44"+
    "\13\0\1\175\5\44\6\0\1\44\3\177\1\102\6\177"+
    "\1\0\23\177\3\44\1\123\1\44\13\0\6\44\6\0"+
    "\1\44\1\200\2\201\1\102\2\200\1\201\1\200\2\201"+
    "\1\0\1\200\2\201\1\200\1\201\4\200\3\201\1\200"+
    "\5\201\1\200\1\201\2\44\1\123\1\44\13\0\4\44"+
    "\1\201\1\44\7\0\1\145\2\105\1\106\1\107\1\145"+
    "\4\0\1\111\5\0\1\145\6\0\1\107\43\0\1\147"+
    "\4\0\1\147\12\0\1\147\52\0\1\147\1\0\1\105"+
    "\2\0\1\147\12\0\1\147\52\0\1\153\1\202\1\154"+
    "\1\0\2\153\1\154\1\153\2\154\1\0\1\153\2\154"+
    "\1\153\1\154\4\153\3\154\1\153\5\154\1\153\1\154"+
    "\23\0\1\154\10\0\3\154\1\0\6\154\1\0\24\154"+
    "\23\0\1\154\7\0\4\44\1\102\6\44\1\0\12\44"+
    "\1\157\13\44\1\123\1\44\13\0\6\44\6\0\4\44"+
    "\1\102\6\44\1\0\14\44\1\203\11\44\1\123\1\44"+
    "\13\0\6\44\6\0\13\160\1\0\26\160\1\0\1\160"+
    "\13\0\6\160\6\0\13\162\1\0\26\162\1\0\1\162"+
    "\13\0\6\162\24\0\1\204\111\0\1\205\70\0\1\206"+
    "\40\0\1\207\3\0\2\207\5\0\1\207\2\0\1\207"+
    "\1\0\4\207\3\0\1\207\5\0\1\207\42\0\1\70"+
    "\12\0\1\70\76\0\1\210\71\0\1\211\46\0\1\44"+
    "\1\173\2\140\1\141\1\142\1\173\4\44\1\111\5\44"+
    "\1\173\6\44\1\142\11\44\1\123\1\44\13\0\6\44"+
    "\6\0\1\44\1\174\1\44\1\140\1\102\1\142\1\174"+
    "\4\44\1\0\5\44\1\174\6\44\1\142\11\44\1\123"+
    "\1\44\13\0\6\44\6\0\1\44\1\176\2\44\1\102"+
    "\1\44\1\176\4\44\1\0\5\44\1\176\20\44\1\123"+
    "\1\44\13\0\6\44\6\0\1\44\1\176\1\44\1\140"+
    "\1\102\1\44\1\176\4\44\1\0\5\44\1\176\20\44"+
    "\1\123\1\44\13\0\6\44\6\0\1\44\1\200\1\212"+
    "\1\201\1\102\2\200\1\201\1\200\2\201\1\0\1\200"+
    "\2\201\1\200\1\201\4\200\3\201\1\200\5\201\1\200"+
    "\1\201\2\44\1\123\1\44\13\0\4\44\1\201\1\44"+
    "\6\0\1\44\3\201\1\102\6\201\1\0\24\201\2\44"+
    "\1\123\1\44\13\0\4\44\1\201\1\44\17\0\1\213"+
    "\75\0\1\214\112\0\1\215\37\0\1\70\3\0\2\70"+
    "\5\0\1\70\2\0\1\70\1\0\4\70\3\0\1\70"+
    "\5\0\1\70\62\0\1\216\74\0\1\70\57\0\1\70"+
    "\105\0\1\217\57\0\1\211\105\0\1\220\100\0\1\70"+
    "\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\15\1\1\11\1\1\2\11\1\1\12\11"+
    "\2\1\3\11\3\1\11\11\1\1\1\11\1\0\1\11"+
    "\11\1\1\0\2\1\1\11\1\1\3\0\1\11\1\1"+
    "\1\0\4\1\2\11\3\0\1\11\10\0\7\1\1\0"+
    "\3\1\1\11\6\1\1\0\1\1\10\0\11\1\6\0"+
    "\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case DISPATCH: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 145: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 4:
            { yybegin(SYMBOL1); return SYM;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return SYM;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return QUOTE;
            } 
            // fall through
          case 54: break;
          case 8: 
            { yybegin(SYMBOL0); return COLON;
            } 
            // fall through
          case 55: break;
          case 9: 
            { yybegin(DISPATCH);
            } 
            // fall through
          case 56: break;
          case 10: 
            { return HAT;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return TILDE;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return AT;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return PAREN1;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return PAREN2;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return BRACKET1;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return BRACKET2;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return BRACE1;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return BRACE2;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return SYNTAX_QUOTE;
            } 
            // fall through
          case 67: break;
          case 21: 
            { yybegin(YYINITIAL); yypushback(yylength());
            } 
            // fall through
          case 68: break;
          case 22: 
            { yybegin(YYINITIAL); return DOT;
            } 
            // fall through
          case 69: break;
          case 23: 
            { yybegin(SYMBOL2); return SLASH;
            } 
            // fall through
          case 70: break;
          case 24: 
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            } 
            // fall through
          case 71: break;
          case 25: 
            { yybegin(SYMBOL3); return SYM;
            } 
            // fall through
          case 72: break;
          case 26: 
            { yybegin(YYINITIAL); yypushback(yylength()); return BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 27: 
            { yybegin(YYINITIAL); yypushback(yylength()); return SHARP;
            } 
            // fall through
          case 74: break;
          case 28: 
            { yybegin(YYINITIAL); yypushback(1); return SHARP;
            } 
            // fall through
          case 75: break;
          case 29: 
            { yybegin(YYINITIAL); return SHARP_QUOTE;
            } 
            // fall through
          case 76: break;
          case 30: 
            { yybegin(YYINITIAL); yypushback(yylength()); return SHARP_NS;
            } 
            // fall through
          case 77: break;
          case 31: 
            { yybegin(YYINITIAL); return SHARP_SYM;
            } 
            // fall through
          case 78: break;
          case 32: 
            { yybegin(YYINITIAL); return SHARP_HAT;
            } 
            // fall through
          case 79: break;
          case 33: 
            { yybegin(YYINITIAL); return SHARP_EQ;
            } 
            // fall through
          case 80: break;
          case 34: 
            { yybegin(YYINITIAL); return SHARP_COMMENT;
            } 
            // fall through
          case 81: break;
          case 35: 
            { yybegin(YYINITIAL); return SHARP_QMARK;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return STRING;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return CHAR;
            } 
            // fall through
          case 84: break;
          case 38: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(SYMBOL0); return DOT;
            } 
            // fall through
          case 85: break;
          case 39: 
            { yybegin(SYMBOL0); return COLONCOLON;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return TILDE_AT;
            } 
            // fall through
          case 87: break;
          case 41: 
            { yybegin(YYINITIAL); return SHARP_QMARK_AT;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return RDXNUM;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return RATIO;
            } 
            // fall through
          case 90: break;
          case 44: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(SYMBOL0); return DOTDASH;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return HEXNUM;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return NIL;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return BOOL;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
