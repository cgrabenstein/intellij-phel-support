/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.phellang.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.phellang.language.psi.PhelTypes;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Phel.flex</tt>
 */
public class PhelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SYMBOL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 18368 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\25\1\61\1\62\5\21\2\25\1\63"+
    "\7\21\1\25\1\64\20\21\1\25\1\65\1\21\1\66\13\25\1\67\2\25\1\70\21\21\1\71"+
    "\1\72\4\21\1\73\11\21\1\74\1\75\1\76\1\77\1\21\1\100\2\21\1\101\1\102\2\21"+
    "\1\103\1\21\1\104\1\105\5\21\1\106\2\21\123\25\1\107\7\25\1\110\1\111\12\25"+
    "\1\112\15\25\1\113\6\21\1\25\1\114\2\21\11\25\1\115\u0576\21\1\116\u017f\21");

  /* The ZZ_CMAP_Y table has 5056 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\11\2\7\1\12\1\13\3\0\1\14"+
    "\1\15\1\16\1\17\2\7\1\20\3\7\1\20\71\7\1\21\1\7\1\22\1\23\1\24\1\25\2\23\16"+
    "\0\1\26\1\27\1\30\1\31\2\7\1\32\11\7\1\33\21\7\1\34\1\35\24\7\1\6\3\7\1\20"+
    "\1\36\5\7\1\37\1\40\4\0\1\41\1\42\1\23\3\7\1\43\1\44\1\23\1\45\1\46\1\0\1"+
    "\47\5\7\1\50\3\0\1\51\1\52\13\7\1\53\1\41\1\54\1\55\1\0\1\56\1\23\1\57\1\60"+
    "\3\7\3\0\1\61\12\7\1\62\1\0\1\63\1\23\1\0\1\64\3\7\1\50\1\65\1\66\2\7\1\62"+
    "\1\67\1\70\1\71\2\23\3\7\1\72\1\7\1\44\6\23\2\7\1\26\2\7\1\23\1\73\5\0\1\74"+
    "\6\7\1\75\2\0\1\76\1\7\1\77\1\0\1\6\1\7\1\100\1\101\1\102\2\7\1\103\1\104"+
    "\1\105\1\106\1\107\1\57\1\110\1\77\1\0\1\111\1\112\1\113\1\43\1\102\2\7\1"+
    "\103\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\0\1\123\1\23\1\113\1\33\1"+
    "\32\2\7\1\103\1\124\1\105\1\41\1\125\1\126\1\23\1\77\1\0\1\36\1\127\1\113"+
    "\1\101\1\102\2\7\1\103\1\124\1\105\1\106\1\117\1\130\1\110\1\77\1\0\1\36\1"+
    "\23\1\131\1\132\1\133\1\134\1\135\1\132\1\7\1\136\1\137\1\140\1\141\1\23\1"+
    "\122\1\0\1\23\1\36\1\142\1\26\1\103\2\7\1\103\1\7\1\143\1\144\1\140\1\145"+
    "\1\44\1\77\1\0\2\23\1\100\1\26\1\103\2\7\1\103\1\146\1\105\1\144\1\140\1\145"+
    "\1\30\1\77\1\0\1\147\1\23\1\74\1\26\1\103\4\7\1\150\1\144\1\151\1\152\1\153"+
    "\1\77\1\0\1\23\1\35\1\113\1\7\1\20\1\35\2\7\1\32\1\154\1\20\1\155\1\156\1"+
    "\0\1\122\1\0\1\157\1\23\1\6\5\7\1\160\1\161\1\162\1\163\1\0\1\5\4\23\1\134"+
    "\1\164\2\7\1\165\1\7\1\160\1\166\1\167\1\45\1\0\1\170\4\23\1\126\2\23\1\5"+
    "\1\0\1\5\1\171\1\172\1\7\1\6\3\7\1\24\1\40\1\0\1\144\1\173\1\0\1\40\3\0\1"+
    "\174\1\175\7\23\5\7\1\50\1\0\1\176\1\0\1\5\1\62\1\177\1\200\1\201\1\202\1"+
    "\7\1\203\1\204\1\0\1\45\4\7\1\33\1\16\5\7\1\164\51\7\1\133\1\20\1\133\5\7"+
    "\1\133\4\7\1\133\1\20\1\133\1\7\1\20\7\7\1\133\10\7\1\205\4\23\2\7\2\23\12"+
    "\7\2\206\1\6\114\7\1\101\2\7\1\6\2\7\1\44\11\7\1\132\1\7\1\126\1\7\1\26\1"+
    "\207\1\23\2\7\1\207\1\23\2\7\1\210\1\23\1\7\1\26\1\211\1\23\6\7\1\212\3\0"+
    "\1\213\1\214\1\0\1\5\3\23\1\215\1\0\1\5\13\7\1\126\1\216\4\7\1\217\10\7\1"+
    "\206\1\23\3\7\1\20\1\0\1\2\1\0\1\2\1\122\1\0\3\7\1\206\1\24\1\23\5\7\1\111"+
    "\3\7\1\22\1\0\1\5\4\23\2\7\1\162\1\2\6\7\1\173\1\163\3\0\1\106\1\0\1\5\1\0"+
    "\1\5\1\153\1\23\1\0\1\41\1\220\7\23\1\142\5\7\1\212\1\0\1\142\1\111\1\0\1"+
    "\5\1\23\1\73\1\2\1\23\1\221\3\7\1\76\1\201\1\0\1\64\4\7\1\62\1\0\1\2\1\23"+
    "\4\7\1\212\2\0\1\23\1\0\1\222\1\0\1\64\3\7\1\206\1\7\1\126\5\7\1\223\2\23"+
    "\1\224\2\0\1\225\1\226\1\227\30\7\7\0\1\230\42\7\2\206\4\7\2\206\1\7\1\231"+
    "\3\7\1\206\6\7\1\26\1\167\1\232\1\24\1\233\1\111\1\7\1\24\1\232\1\24\1\23"+
    "\1\73\3\23\1\234\1\23\1\153\1\126\1\23\1\235\1\23\1\144\1\0\1\36\1\153\2\23"+
    "\1\7\1\24\4\7\2\23\1\0\1\174\1\236\1\0\1\220\1\23\1\237\1\35\1\154\1\240\1"+
    "\25\1\241\1\7\1\242\1\243\1\244\2\23\5\7\1\126\116\23\5\7\1\20\5\7\1\20\20"+
    "\7\1\24\1\245\1\246\1\23\4\7\1\33\1\16\7\7\1\153\1\23\1\57\2\7\1\20\1\23\10"+
    "\20\4\0\5\23\1\153\72\23\1\243\3\23\1\6\1\203\1\240\1\24\1\6\11\7\1\20\1\247"+
    "\1\6\12\7\1\164\1\243\5\7\1\6\12\7\1\20\2\23\4\7\6\23\172\7\10\23\77\7\1\24"+
    "\21\7\1\24\10\23\5\7\1\206\41\7\1\24\2\7\1\0\1\246\2\23\5\7\1\162\1\250\1"+
    "\251\3\7\1\62\12\7\1\5\3\23\1\153\1\7\1\35\14\7\1\102\6\7\1\35\1\44\4\23\1"+
    "\243\1\7\1\252\1\253\2\7\1\50\1\254\1\23\1\126\6\7\1\111\1\23\1\64\5\7\1\212"+
    "\1\0\1\45\1\23\1\0\1\5\2\0\1\64\1\255\1\0\1\64\2\7\1\62\1\45\2\7\1\162\1\0"+
    "\1\2\1\23\3\7\1\24\1\74\5\7\1\50\1\0\1\220\1\153\1\0\1\5\1\256\1\7\1\0\1\257"+
    "\5\7\1\76\1\163\1\23\1\253\1\260\1\0\1\5\2\7\1\20\1\261\6\7\1\200\1\262\1"+
    "\217\2\23\1\263\1\7\1\50\1\264\1\23\3\265\1\23\2\20\5\7\1\164\1\7\1\22\16"+
    "\7\1\50\1\266\1\0\1\5\64\7\1\111\1\23\2\7\1\20\1\267\5\7\1\111\40\23\55\7"+
    "\1\206\15\7\1\22\4\23\1\20\1\23\1\267\1\270\1\7\1\103\1\20\1\167\1\271\15"+
    "\7\1\22\3\23\1\267\54\7\1\206\2\23\10\7\1\35\6\7\5\23\1\7\1\24\2\0\2\23\2"+
    "\0\1\135\2\23\1\243\3\23\1\36\1\26\20\7\1\272\1\235\1\23\1\0\1\5\1\6\2\7\1"+
    "\43\1\6\2\7\1\44\1\273\12\7\1\20\3\35\1\274\1\275\2\23\1\276\1\7\1\146\2\7"+
    "\1\20\2\7\1\277\1\7\1\206\1\7\1\206\4\23\17\7\1\44\10\23\6\7\1\24\20\23\1"+
    "\300\20\23\3\7\1\24\6\7\1\126\1\23\1\220\3\23\4\7\1\23\1\243\3\7\1\44\4\7"+
    "\1\62\1\301\3\7\1\206\4\7\1\111\1\7\1\240\5\23\23\7\1\206\1\0\1\5\4\7\1\111"+
    "\4\7\1\111\5\7\1\23\6\7\1\111\23\23\46\7\1\20\1\23\2\7\1\206\1\23\1\7\23\23"+
    "\1\206\1\103\4\7\1\33\1\302\2\7\1\206\1\23\2\7\1\20\1\23\3\7\1\20\10\23\2"+
    "\7\1\303\1\23\2\7\1\206\1\23\3\7\1\22\10\23\7\7\1\273\10\23\1\304\1\250\1"+
    "\146\1\6\2\7\1\206\1\116\4\23\3\7\1\24\3\7\1\24\4\23\1\7\1\6\2\7\1\305\3\23"+
    "\6\7\1\206\1\23\2\7\1\206\1\23\2\7\1\44\1\23\2\7\1\22\15\23\11\7\1\126\6\23"+
    "\6\7\1\44\1\23\6\7\1\44\1\23\4\7\1\212\1\23\1\0\1\5\50\23\5\7\1\306\1\22\11"+
    "\23\3\7\1\24\1\153\1\23\2\7\1\62\1\0\1\220\13\23\2\7\1\24\3\23\2\7\1\20\1"+
    "\23\1\221\6\7\1\0\1\163\3\23\1\122\1\0\1\23\1\57\1\221\5\7\1\0\1\307\1\23"+
    "\1\300\3\7\1\126\1\0\1\5\1\221\3\7\1\162\1\0\1\144\1\0\1\310\1\23\4\7\1\311"+
    "\1\23\1\221\5\7\1\50\1\0\1\312\1\313\1\0\1\314\4\23\2\7\1\32\2\7\1\212\1\0"+
    "\1\175\10\23\1\20\1\241\1\7\1\33\1\7\1\126\5\7\1\162\1\0\1\301\1\0\1\5\1\315"+
    "\1\101\1\102\2\7\1\103\1\124\1\316\1\106\1\117\1\141\1\243\1\77\2\174\21\23"+
    "\6\7\1\173\1\0\1\176\1\44\1\0\1\317\1\22\3\23\6\7\2\0\1\320\1\23\1\0\1\5\24"+
    "\23\5\7\1\162\1\45\1\0\1\220\2\23\1\260\4\23\6\7\2\0\1\321\1\23\1\0\1\5\4"+
    "\23\5\7\1\50\1\0\1\126\1\0\1\5\6\23\3\7\1\205\1\0\1\2\1\0\1\5\30\23\5\7\1"+
    "\212\1\0\1\301\14\23\10\7\1\0\1\5\1\23\1\153\1\20\1\322\1\323\3\7\1\41\1\324"+
    "\1\325\1\23\1\0\1\5\10\23\1\7\1\35\4\7\1\76\1\326\1\327\3\23\1\76\1\221\4"+
    "\7\1\50\1\330\1\57\1\23\1\76\1\74\5\7\1\203\1\0\1\331\4\23\7\7\1\126\40\23"+
    "\1\7\1\103\3\7\1\162\1\163\1\0\1\126\1\23\1\0\1\5\2\23\1\35\3\7\1\326\2\0"+
    "\1\40\1\163\11\23\1\20\1\32\4\7\1\332\1\333\1\204\1\23\1\0\1\5\1\33\1\103"+
    "\3\7\1\334\1\230\1\126\1\0\1\5\46\23\2\7\1\335\27\23\1\126\4\23\1\243\1\126"+
    "\3\23\63\7\1\22\14\23\15\7\1\20\2\23\30\7\1\111\27\23\5\7\1\20\1\0\1\220\70"+
    "\23\10\7\1\20\67\23\7\7\1\126\3\7\1\20\1\0\1\5\14\23\3\7\1\206\1\174\1\23"+
    "\6\7\1\163\1\23\1\111\1\23\1\0\1\5\1\267\2\7\1\243\2\7\26\23\10\7\20\23\11"+
    "\7\1\336\1\76\6\0\1\57\1\221\1\7\10\23\1\337\1\23\1\5\1\23\77\7\1\23\32\7"+
    "\1\206\5\23\1\7\1\126\36\23\43\7\1\20\6\23\1\44\1\23\1\340\1\23\61\7\1\111"+
    "\40\23\15\7\1\44\1\7\1\24\1\7\1\126\1\7\1\341\1\2\127\23\1\130\1\342\2\0\1"+
    "\343\1\2\3\23\1\344\22\23\1\345\67\23\12\7\1\26\10\7\1\26\1\346\1\347\1\7"+
    "\1\350\1\146\7\7\1\33\1\223\2\26\3\7\1\351\1\167\1\35\1\103\51\7\1\206\3\7"+
    "\1\103\2\7\1\164\3\7\1\164\2\7\1\26\3\7\1\26\2\7\1\20\3\7\1\20\3\7\1\103\3"+
    "\7\1\103\2\7\1\164\1\352\14\0\1\163\1\73\5\0\1\174\1\300\1\23\1\254\2\23\1"+
    "\73\1\40\1\0\52\23\1\163\2\0\1\353\1\354\1\301\32\23\5\7\1\24\1\176\1\206"+
    "\1\0\1\355\56\23\5\7\1\212\1\0\1\356\40\23\30\7\1\24\1\23\1\163\5\23\10\7"+
    "\1\212\1\357\1\0\1\5\52\23\1\126\51\23\1\146\3\7\1\360\1\6\1\164\1\361\1\237"+
    "\1\362\1\360\1\231\1\360\2\164\1\121\1\7\1\32\1\7\1\111\1\363\1\32\1\7\1\111"+
    "\146\23\1\0\1\5\33\7\1\206\4\23\106\7\1\24\1\23\33\7\1\206\120\7\1\22\1\23"+
    "\146\7\1\126\3\23\3\7\1\206\74\23\51\7\1\44\26\23\1\120\3\23\14\0\20\23\36"+
    "\0\2\23");

  /* The ZZ_CMAP_A table has 1952 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\13\1\4\1\2\1\1\1\5\1\3\6\13\4\0\1\4\1\0\1\7\1\6\1\12\2\0\1\23\1\14\1\15"+
    "\2\0\1\22\3\0\2\13\7\0\22\12\1\16\1\10\1\17\1\0\1\12\1\24\12\12\1\20\1\0\1"+
    "\21\1\0\6\13\1\11\2\13\2\0\4\12\4\0\1\12\2\0\1\13\7\0\1\12\4\0\1\12\5\0\7"+
    "\12\1\0\2\12\4\0\4\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2\0\4"+
    "\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\13\12\1\0\3\12\1\0\5"+
    "\13\2\0\6\12\1\0\1\12\6\0\1\12\6\0\1\12\1\0\15\13\1\0\1\13\1\0\2\13\1\0\2"+
    "\13\1\0\1\13\3\12\4\0\4\12\5\0\6\13\5\0\1\12\4\0\3\13\1\0\1\13\3\0\3\12\7"+
    "\13\4\0\2\12\1\13\13\12\1\0\1\12\7\13\2\12\2\13\1\0\4\13\2\12\2\13\3\12\2"+
    "\0\1\12\7\0\1\13\1\12\1\13\6\12\3\13\2\0\11\12\3\13\1\12\6\0\2\13\6\12\4\13"+
    "\2\12\4\0\1\12\2\0\1\13\2\12\2\13\1\12\11\13\1\12\3\13\1\12\5\13\2\0\1\12"+
    "\3\13\7\0\11\13\6\12\3\13\1\12\2\13\1\12\7\13\2\12\2\13\2\0\2\13\1\12\3\13"+
    "\1\0\10\12\2\0\2\12\2\0\6\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0\1\13\1\12\7\13"+
    "\2\0\2\13\2\0\3\13\1\12\5\0\2\12\1\0\5\12\7\0\2\12\1\0\1\13\2\0\3\13\1\0\4"+
    "\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13"+
    "\7\0\4\12\1\0\1\12\7\0\4\13\3\12\1\13\2\0\1\12\1\0\2\12\1\0\3\12\2\13\1\0"+
    "\3\13\2\0\1\12\10\0\1\12\6\13\5\0\3\13\2\0\1\13\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\2\12\4\0\5\13\3\0\3\13\1\0\4"+
    "\13\2\0\1\12\6\0\6\13\5\12\3\0\1\12\7\13\1\0\2\13\5\0\2\13\1\0\4\12\1\0\3"+
    "\12\1\0\2\12\5\0\3\12\2\13\1\12\3\13\1\0\4\13\1\12\5\0\3\12\1\13\7\0\5\12"+
    "\1\0\1\12\4\0\1\13\4\0\6\13\1\0\1\13\3\0\2\13\4\0\1\12\1\13\2\12\7\13\4\0"+
    "\10\12\10\13\1\0\3\12\1\0\10\12\1\0\1\12\1\0\1\12\5\13\1\12\2\0\5\12\1\0\1"+
    "\12\1\0\2\13\2\0\4\12\5\0\1\13\1\0\1\13\1\0\1\13\4\0\2\13\5\12\10\13\11\0"+
    "\1\13\1\0\7\13\1\12\2\13\4\12\3\13\1\12\3\13\2\12\7\13\3\12\4\13\5\12\14\13"+
    "\1\12\1\13\3\12\2\0\3\13\6\12\2\0\2\12\3\13\3\0\2\12\2\13\4\0\1\12\1\0\2\13"+
    "\4\0\4\12\10\13\3\0\1\12\3\0\2\12\1\13\5\0\4\13\1\0\5\12\2\13\2\12\1\13\1"+
    "\12\5\0\1\13\7\0\3\13\5\12\2\13\3\0\6\12\2\0\3\12\3\13\1\0\5\13\4\12\1\13"+
    "\6\12\1\13\2\12\3\13\1\12\5\0\2\13\1\0\5\13\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\2\0\3\12\1\0\6\12\2\0\2\12\2\1\5\13\5\0\1\12\4\0\1\13\3\0\3\13\2\0\1"+
    "\12\4\0\1\12\1\0\5\12\2\0\1\12\1\0\4\12\1\0\3\12\2\0\4\12\5\0\5\12\4\0\1\12"+
    "\4\0\4\12\3\13\2\12\5\0\2\13\2\0\3\12\4\0\12\13\1\0\3\12\1\13\3\12\1\13\4"+
    "\12\1\13\4\12\4\0\1\13\6\0\1\12\1\0\2\12\1\13\5\12\1\13\2\12\2\13\5\12\1\0"+
    "\4\12\2\13\4\0\1\12\3\13\2\12\1\13\5\12\2\13\3\0\3\12\4\0\3\12\2\13\2\0\6"+
    "\12\1\0\3\13\1\0\2\13\5\0\5\12\5\0\1\12\1\13\3\12\1\0\2\12\1\0\7\12\2\0\1"+
    "\13\6\0\2\12\2\0\3\12\3\0\2\12\3\0\2\12\2\0\3\13\4\0\3\12\1\0\2\12\1\0\1\12"+
    "\5\0\1\13\2\0\3\13\5\0\1\12\3\0\1\12\2\0\4\12\1\0\2\12\2\0\1\12\3\13\1\0\2"+
    "\13\1\0\5\12\2\13\1\0\2\12\1\0\2\13\3\0\3\13\2\0\1\13\6\0\1\12\2\13\4\12\1"+
    "\13\2\0\1\12\1\0\1\13\4\12\4\0\4\13\1\0\4\13\1\12\1\0\1\12\3\0\4\13\1\0\5"+
    "\12\1\0\2\13\1\12\4\13\4\0\1\13\1\12\4\13\2\12\1\0\1\12\1\13\3\0\1\12\4\0"+
    "\1\12\2\0\10\12\1\0\2\12\1\0\1\13\2\0\4\13\1\12\1\13\1\12\2\13\6\0\7\13\1"+
    "\12\1\0\1\12\1\13\3\0\2\13\1\12\4\13\1\0\2\13\3\0\1\12\2\0\1\12\6\13\3\0\1"+
    "\13\1\0\2\13\1\0\1\13\2\12\5\13\1\0\3\12\4\13\1\0\3\12\4\0\1\13\2\12\1\0\1"+
    "\12\1\13\7\0\6\12\3\0\2\13\1\0\2\13\3\0\6\13\2\0\3\13\2\0\4\13\4\0\3\13\5"+
    "\0\1\12\2\0\2\12\2\0\4\12\1\0\4\12\1\0\1\12\1\0\5\12\1\0\4\12\1\0\4\12\2\0"+
    "\3\13\2\0\7\13\1\0\2\13\1\0\4\13\4\0\1\12\1\0\2\13\5\0\1\12\3\13\1\12\5\0"+
    "\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\5\0\1\12\1\0\1\12\1\0\3\12\1\0\3"+
    "\12\1\0\3\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\0\1\20\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[22];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\25\0\52\0\77\0\124\0\151\0\52\0\52"+
    "\0\52\0\52\0\52\0\52\0\52\0\52\0\52\0\52"+
    "\0\77\0\176\0\223\0\151\0\52\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[22];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\3\1\4\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\4\1\21\1\4\2\21\3\3\1\22"+
    "\2\23\11\3\26\0\5\4\3\0\1\4\13\0\2\5"+
    "\2\0\21\5\7\24\1\25\1\26\14\24\1\0\5\4"+
    "\3\0\1\22\2\23\22\0\3\23\11\0\1\24\3\0"+
    "\1\24\1\0\3\24\1\0\13\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\3\1\12\11\3\1\1\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[22];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return PhelTypes.WORD;
            } 
            // fall through
          case 17: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 18: break;
          case 3: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 19: break;
          case 4: 
            { return PhelTypes.COMMENT;
            } 
            // fall through
          case 20: break;
          case 5: 
            { yybegin(SYMBOL); return PhelTypes.WORD;
            } 
            // fall through
          case 21: break;
          case 6: 
            { return PhelTypes.PARENS_OPEN;
            } 
            // fall through
          case 22: break;
          case 7: 
            { return PhelTypes.PARENS_CLOSE;
            } 
            // fall through
          case 23: break;
          case 8: 
            { return PhelTypes.BRACKET_OPEN;
            } 
            // fall through
          case 24: break;
          case 9: 
            { return PhelTypes.BRACKET_CLOSE;
            } 
            // fall through
          case 25: break;
          case 10: 
            { return PhelTypes.BRACE_OPEN;
            } 
            // fall through
          case 26: break;
          case 11: 
            { return PhelTypes.BRACE_CLOSE;
            } 
            // fall through
          case 27: break;
          case 12: 
            { return PhelTypes.COMMA;
            } 
            // fall through
          case 28: break;
          case 13: 
            { return PhelTypes.QUOTE;
            } 
            // fall through
          case 29: break;
          case 14: 
            { return PhelTypes.SYNTAX_QUOTE;
            } 
            // fall through
          case 30: break;
          case 15: 
            { yybegin(YYINITIAL); return PhelTypes.WORD;
            } 
            // fall through
          case 31: break;
          case 16: 
            { return PhelTypes.STRING;
            } 
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
